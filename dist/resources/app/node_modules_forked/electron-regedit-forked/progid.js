'use strict';

const Registry = require('winreg')
const path = require('path')
const fs = require('fs')
const {app} = require('electron')
const regedit = require("regedit")
const Q = require('q')

const {$create, $set, $destroy} = require('./util')
const ShellOption = require('./shelloption')
const Regedit = require('./regedit')
const debug = require('./debug')

function isInsidersInstalled() {
    return fs.existsSync(path.join(process.env.LOCALAPPDATA, "OrbInsiders\\orb_insiders.exe"));
}

function isProdInstalled() {
    return fs.existsSync(path.join(process.env.LOCALAPPDATA, "Orb\\orb.exe"));
}

function isInsiders() {
    return path.basename(process.execPath).toLowerCase() === "orb_insiders.exe";
}

function ProgId({
    progExt = '',
    appName = app.getName(),
    description = undefined,
    friendlyAppName = undefined,
    hive = Registry.HKCU,
    squirrel = false,
    icon,
    shell = [],
    extensions = []
}) {
    this.progId = progExt ? `${appName}.${progExt}` : `${appName}`
    this.appName = appName
    this.description = description
    this.hive = hive
    this.icon = icon
    this.squirrel = squirrel
    this.friendlyAppName = friendlyAppName
    this.extensions = extensions
    this.shell = bindShells(this, shell)
    this.BASE_KEY = `\\Software\\Classes\\${this.appName}`
    Regedit.add(this)
}

function bindShells(prog, shell) {
    if (Array.isArray(shell) && shell.length === 0) {
        shell.push(new ShellOption({}))
    }

    return shell.map((s) => s.bindProg(prog))
}

ProgId.prototype.uninstall = function () {
    function unregisterTrustedProtocol() {
        if ((isInsiders() && !isProdInstalled()) || (!isInsiders() && !isInsidersInstalled())) {
            const officeRegistry = "HKCU\\Software\\Policies\\Microsoft\\Office";
            return new Promise(function (resolve, reject) {
                regedit.list([officeRegistry], function (err, entry) {
                    if (err) {
                        console.log(err);
                        return;
                    }

                    if (entry && entry[officeRegistry] && entry[officeRegistry].keys) {
                        let keys = [];
                        for (let index = 0; index < entry[officeRegistry].keys.length; index++) {
                            keys.push(path.join(officeRegistry, entry[officeRegistry].keys[index], "Common\\Security\\Trusted Protocols\\All Applications\\orb:"));
                        }

                        regedit.deleteKey(keys, function (err) {
                            if (err) {
                                console.log(err);
                            }

                            resolve();
                        })
                    }
                })
            })
        }
    }

    function unregisterProtocol(registry) {
        if (isInsiders() || !isInsidersInstalled()) {
            return $destroy(registry);
        }
    }

    if (process.platform !== 'win32') {
        return false;
    }

    let self = this

    let registry = new Registry({
        hive: this.hive,
        key: this.BASE_KEY
    })

    return $destroy(registry).then(() => {
        app.removeAsDefaultProtocolClient("orbx");
        return unregisterTrustedProtocol();
    })
};

ProgId.prototype.install = function () {
    if (process.platform !== 'win32') {
        return false;
    }

    let self = this

    let registry = new Registry({
        hive: this.hive,
        key: this.BASE_KEY
    })

    // do not change the order.
    // registerShellCommands needs to be done before registerProtocol
    return $create(registry)
        .then(() => registerDescription())
        .then(() => registerIcon())
        .then(() => registerShellCommands())
        .then(() => registerFileAssociations())
        .then(() => registerProtocol())
        .then(() => registerTrustedProtocol())
        .then(() => debug(`Installed registry "${this.progId}" sucessfully`))

    function registerDescription() {
        if (!self.description) return
        return $set(registry, Registry.DEFAULT_VALUE, Registry.REG_SZ, self.description)
    }

    function registerIcon() {
        if (!self.icon) return

        let iconPath
        if (path.isAbsolute(self.icon)) {
            iconPath = self.icon
        } else {
            iconPath = path.join(process.execPath, '..', self.icon)
        }

        let defaultIcon = new Registry({
            hive: self.hive,
            key: `${self.BASE_KEY}\\DefaultIcon`
        })

        return $create(defaultIcon)
            .then(() => $set(defaultIcon, Registry.DEFAULT_VALUE, Registry.REG_SZ, iconPath))
    }

    function registerShellCommands(baseKey) {
        let shells = self.shell.map(shell => shell.install(baseKey))
        return Q.all(shells)
    }

    function registerFileAssociations() {
        let extensions = self.extensions.map((ext) => registerFileExtension(ext))
        return Q.all(extensions)
    }

    function registerFileExtension(ext) {
        let registry = new Registry({
            hive: self.hive,
            key: `\\Software\\Classes\\.${ext}\\OpenWithProgids`
        })

        return $create(registry).then(() => {
            return $set(registry, self.progId, Registry.REG_SZ, '').then(() => {

                let registry2 = new Registry({
                    hive: self.hive,
                    key: `\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.${ext}\\OpenWithProgids`
                });

                return $create(registry2).then(() => {
                    return $set(registry2, self.progId, Registry.REG_SZ, '')
                });
            })
        });
    }

    function registerTrustedProtocol() {
        const officeRegistry = "HKCU\\Software\\Policies\\Microsoft\\Office";
        return new Promise(function (resolve, reject) {
            regedit.list([officeRegistry], function (err, entry) {
                if (err) {
                    reject(err);
                    return;
                }

                if (entry && entry[officeRegistry] && entry[officeRegistry].keys) {
                    let latestVersionIndex = entry[officeRegistry].keys.length - 1;
                    let latestVersion = entry[officeRegistry].keys[latestVersionIndex];
                    let registryKey = path.join(officeRegistry, latestVersion, "Common\\Security\\Trusted Protocols\\All Applications\\orbx:");
                    regedit.createKey([registryKey], function (err) {
                        if (err) {
                            reject(err);
                            return
                        }

                        resolve();
                    })
                }
            })
        })
    }

    function registerProtocol() {
        if (isInsidersInstalled() && !isInsiders()) {
            return Promise.resolve();
        }

        app.setAsDefaultProtocolClient("orbx");
        return Promise.resolve();
    }
};

module.exports = ProgId