const { ipcRenderer } = require('electron');
const docReady = require('doc-ready');

let promptId = null;
let promptOptions = null;

const promptError = e => {
    if (e instanceof Error) {
        e = e.message;
    }
    ipcRenderer.sendSync('prompt-error:' + promptId, e);
};

const promptConsole = (message) => {
    ipcRenderer.sendSync('prompt-console:' + promptId, message);
}

const promptCancel = () => {
    ipcRenderer.sendSync('prompt-post-data:' + promptId, null);
};

const promptSubmit = () => {
    const dataEls = document.getElementsByTagName('input');
    let dataCollection = [];

    for (let i = 0; i < dataEls.length; i++) {
        dataCollection.push(dataEls[i].value);
    }

    ipcRenderer.sendSync('prompt-post-data:' + promptId, dataCollection);
};

docReady(() => {
    promptId = document.location.hash.replace('#', '');

    try {
        promptOptions = JSON.parse(ipcRenderer.sendSync('prompt-get-options:' + promptId));
    } catch (e) {
        return promptError(e);
    }

    document.getElementById('ok').addEventListener('click', () => promptSubmit());
    document.getElementById('cancel').addEventListener('click', () => promptCancel());

    const inputContainerEl = document.getElementById('input-container');
    let focus = false;

    promptOptions.inputAttrs.forEach((inputAttr) => {
        let divEl;
        let inputEl;
        let labelEl;

        divEl = document.createElement('div');
        divEl.setAttribute('class', 'line');
        if (inputAttr.label) {
            labelEl = document.createElement('label');
            labelEl.textContent = inputAttr.label;
            inputContainerEl.appendChild(labelEl);
        }

        inputEl = document.createElement('input');
        inputEl.setAttribute('type', 'text');

        if (inputAttr.value) {
            inputEl.value = inputAttr.value;
        } else {
            inputEl.value = '';
        }

        if (inputAttr && typeof (inputAttr) === 'object') {
            for (const k in inputAttr) {
                if (!Object.prototype.hasOwnProperty.call(inputAttr, k)) {
                    continue;
                }

                inputEl.setAttribute(k, inputAttr[k]);
            }
        }

        inputEl.addEventListener('keyup', e => {
            e.which = e.which || e.keyCode;
            if (e.which === 13) {
                promptSubmit();
            }
            if (e.which === 27) {
                promptCancel();
            }
        });

        divEl.appendChild(labelEl);
        divEl.appendChild(inputEl);
        inputContainerEl.appendChild(divEl);
        if (focus) {
            inputEl.focus();
            inputEl.select();
            focus = false;
        }
    })
});