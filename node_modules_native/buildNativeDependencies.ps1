param([switch]$SkipInstall, [string]$moduleFilter="*")

# Rebuild any native dependencies and target them to a specific version of electron
# Very similar to electron-rebuild, but targeted for Orb's specific build/directory structure.

if($env:COREXT_SOURCECONTROL)
{
  throw "This script should not be run from corext. Launch a new powershell window from run/explorer."
}

$packagePath = join-path (split-path (split-path $PSCommandPath)) "\package.json"

if(!$packagePath -or !(test-path $packagePath))
{
  throw "Could not find electron package.json"
}

$packageJson =  (gc -Raw $packagePath) | ConvertFrom-Json

$electronVersion = $packageJson.devDependencies.electron

if(!$electronVersion)
{
  throw "Could not find electron version"
}

Write-Host "Using electron version $electronVersion"

if(!$SkipInstall)
{

  write-host "Installing windows build tools"

  npm install --global --production windows-build-tools@4.0.0

  if($lastExitCode -ne 0)
  {
    throw "Failed to install windows build tools."
  }

  cd (split-path $PSCommandPath)
  npm install --ignore-scripts

  # Delete packages.config files. Corext fails init.cmd because of these files.
  dir "packages.config" -Recurse | del -Force

  if($lastExitCode -ne 0)
  {
    throw "Failed to install native modules."
  }
}

$packagePath = join-path (split-path $PSCommandPath) "\package.json"

if(!$packagePath -or !(test-path $packagePath))
{
  throw "Could not find electron package.json"
}

$packageJson =  (gc -Raw $packagePath) | ConvertFrom-Json

$nativeModules = $packageJson.dependencies | Get-Member -MemberType NoteProperty | select -ExpandProperty name |? {$_ -like $moduleFilter}

npm install --global --production node-gyp@3.8.0

foreach($m in $nativeModules)
{
  Write-Host "Building $m"
  cd (join-path (split-path $PSCommandPath) "\node_modules\$m")
  node-gyp configure
  if($lastExitCode -ne 0)
  {
    throw "node-gyp configre failed"
  }
  
  node-gyp rebuild --target="$electronVersion" --arch=x64 --dist-url="https://atom.io/download/atom-shell"
  if($lastExitCode -ne 0)
  {
    throw "node-gyp rebuild failed"
  }
}

# build node modules forked. 
$forkedModulesPath =  join-path (split-path $PSCommandPath) "\node_modules_forked"
cd $forkedModulesPath
$nativeModules = dir -Directory | select -ExpandProperty Name |? {$_ -like $moduleFilter}

foreach($m in $nativeModules)
{
  Write-Host "Building $m"
  cd (join-path (split-path $PSCommandPath) "\node_modules_forked\$m")
  node-gyp configure
  if($lastExitCode -ne 0)
  {
    throw "node-gyp configre failed"
  }
  
  node-gyp rebuild --target="$electronVersion" --arch=x64 --dist-url="https://atom.io/download/atom-shell"
  if($lastExitCode -ne 0)
  {
    throw "node-gyp rebuild failed"
  }
}

$sourcePath = join-path (split-path $PSCommandPath) "\node_modules\*"

$destinationPath = join-path (split-path(split-path $PSCommandPath)) "dist\resources\app\node_modules"

Write-Host "copying node_modules"

Copy $sourcePath $destinationPath -Recurse -Force
copy "$forkedModulesPath\*" $destinationPath -Recurse -Force

cd (split-path $PSCommandPath)

write-Host -ForegroundColor Yellow "Make sure you test native dependencies like the Terminal, PSMD and national cloud auth."
write-Host -ForegroundColor Yellow "Don't forget to update and publish the nuget package for the native binaries."


  
